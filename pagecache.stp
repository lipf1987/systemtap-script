global mis = 0;
global hit = 0;
global follow_fork = 0   /* -Gfollow_fork=1 means trace descendant processes too */
function filter_p()
  {
    if (target() == 0) return 0; /* system-wide */
    if (!follow_fork && pid() != target()) return 1; /* single-process */
    if (follow_fork && !target_set_pid(pid())) return 1; /* multi-process */
    return 0;
  }
probe kernel.function("pagecache_get_page").return {
    if (filter_p()) next;
	if($return == NULL)
		mis++;
	else
		hit++;

}
probe timer.s(1) {
	if(hit != 0 || mis!= 0) {
		printf("page cache hit rate: %d%% hit:%d, mis:%d \n", hit*100/(hit+mis), hit,mis);
		mis = 0;
		hit = 0;
	}
}
probe end {
	if(hit != 0 || mis!= 0)
		printf("page cache hit rate: %d%% hit:%d, mis:%d \n", hit*100/(hit+mis), hit,mis);
	delete mis;
	delete hit;
	delete follow_fork;
}
