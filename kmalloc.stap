#! /usr/bin/env stap
global kmalloc_stack, kfree_stack, kmem_cache_alloc_stack, kmem_cache_free_stack,  alloc, free

function freesize:long(arg:long) %{
	struct kmem_cache* s;
	void* x = (void*)(STAP_ARG_arg);
	struct page *page = virt_to_head_page(x);
	STAP_RETVALUE =(long) page;
%}
//probe kernel.statement("__kmalloc@slub.c:3736"),
//	  kernel.statement("__kmalloc_track_caller@slub.c:4232"),
//	  kernel.statement("kmem_cache_alloc_trace@slub.c:2738") {
//        kmalloc_stack[$s->size, backtrace()]<<<1
//		alloc[$s->size]<<<1
////		printf("kmalloc: %s: %d : %d %lx\n",  execname(), tid(), $s->size, $return);
//}
probe kernel.statement("kmem_cache_alloc@slub.c:2727") {
        kmem_cache_alloc_stack[$s->size, backtrace()]<<<1
		alloc[$s->size]<<<1
		//printf("kmem_cache_alloc : %s: %d :  %lx\n",  execname(), tid(), $return);
}
probe kernel.statement("kmem_cache_free@slub.c:2975") {
	 	sz = @cast(freesize($x),"page")->slab_cache->size;
        kmem_cache_free_stack[sz, backtrace()]<<<1
		free[sz] <<< 1
		//printf("kmem_cache_free : %s: %d :  %lx\n",  execname(), tid(), $x);
}
//probe kernel.statement("kfree@slub.c:3875") {
//	 	sz = @cast(freesize($x),"page")->slab_cache->size;
//        kfree_stack[sz, backtrace()]<<<1
//		free[sz] <<< 1
////		printf("kfree: %s: %d : %d %lx\n", execname(), tid(), sz, $x);
//
//}
probe timer.s(15), end
{
  //printf("\n------------------kmalloc-------------------------------------\n\n")
  //foreach ([size, stack] in kmalloc_stack-) {
  //  printf("size: %d, times %d \n", size, @count(kmalloc_stack[size, stack]))
  //  print_stack(stack)
  //}
  printf("\n------------------kmem_cache_alloc-------------------------------------\n\n")
  foreach ([size, stack] in kmem_cache_alloc_stack-) {
    printf("size: %d, times %d \n", size, @count(kmem_cache_alloc_stack[size, stack]))
    print_stack(stack)
  }
  printf("\n-------------------kmem_cache_free-------------------------------------\n\n")
  foreach ([size, stack] in kmem_cache_free_stack-) {
    printf("size: %d, times %d \n", size, @count(kmem_cache_free_stack[size, stack]))
    print_stack(stack)
  }
  //printf("\n-------------------kfree-------------------------------------\n\n")
  //foreach ([size, stack] in kfree_stack-) {
  //  printf("size: %d, times %d \n", size, @count(kfree_stack[size, stack]))
  //  print_stack(stack)
  //}
  //printf("\n-------------------*******-------------------------------------\n\n")
  foreach ([size] in alloc-) {
      printf("summary: size %10d     %-10d\n", size, @count(alloc[size])-@count(free[size]))
  }
  printf("\n------------------------------------------------------------\n\n")
  //delete kmalloc_stack
  //delete kfree_stack
  delete kmem_cache_alloc_stack
  delete kmem_cache_free_stack
  delete alloc
  delete free
}

